//***************************************************************************
//*
//*  Global Variables
//*
//***************************************************************************

globals
    //-----------------------------------------------------------------------
    // Variables
    //
    integer                 attackWave                 = 1
    integer                 nextDelay                  = 0
    integer                 awGold                     = 0
    integer                 awWood                     = 0 
endglobals



//***************************************************************************
//*
//*  General Utility Functions
//*  These functions exist purely to make the trigger dialogs cleaner and
//*  more comprehensible.
//*
//***************************************************************************


//===========================================================================
function BuildExpansion takes integer hallID, integer mineID returns nothing
    if (HallsCompleted(hallID)) then
        call SetBuildExpa( TownCount(hallID) + 1, mineID )
    endif
endfunction

//===========================================================================
function CurrentAttackWave takes nothing returns integer
    return attackWave
endfunction

//===========================================================================
function ResetAttackUnits takes nothing returns nothing
    set awGold = 0
    set awWood = 0
    call InitAssaultGroup(  )
endfunction

//===========================================================================
function AddAttackUnit takes integer minQty, integer maxQty, integer unitID returns nothing
    // Track attacking gold workers
    if (unitID == 'uaco') then
        set awGold = awGold + minQty
    endif

    // Track attacking wood workers
    if (unitID == 'ugho') then
        set awWood = awWood + minQty
    endif

    call SetAssaultGroup( minQty, maxQty, unitID )
endfunction




//***************************************************************************
//*
//*  Basic Options
//*
//***************************************************************************

//===========================================================================

function InitOptions takes nothing returns nothing
    call SetMeleeAI(  )
    call SetDefendPlayer( true )
    call SetRandomPaths( true )
    call SetTargetHeroes( true )
    call SetPeonsRepair( true )
    call SetHeroesFlee( true )
    call SetHeroesBuyItems( true )
    call SetUnitsFlee( true )
    call SetGroupsFlee( true )
    call SetWatchMegaTargets( false )
    call SetIgnoreInjured( false )
    call SetHeroesTakeItems( true )
    call SetSlowChopping( false )
    call SetCaptainChanges( true )
    call SetSmartArtillery( true )
    call SetHeroesBuyItems( true )
endfunction


//***************************************************************************
//*
//*  Heroes
//*
//***************************************************************************

//===========================================================================
// Stores hero ID and skills
//===========================================================================
function SetHero takes integer order, integer heroid returns nothing
    if (order == 1) then
        set hero_id = heroid
        if (heroid == 'Udea') then
            set skills1[ 1] = 'AUdc'
            set skills1[ 2] = 'AUau'
            set skills1[ 3] = 'AUdc'
            set skills1[ 4] = 'AUau'
            set skills1[ 5] = 'AUdc'
            set skills1[ 6] = 'AUan'
            set skills1[ 7] = 'AUau'
            set skills1[ 8] = 'AUdp'
            set skills1[ 9] = 'AUdp'
            set skills1[10] = 'AUdp'
        elseif (heroid == 'Ulic') then
            set skills1[ 1] = 'AUfn'
            set skills1[ 2] = 'AUfu'
            set skills1[ 3] = 'AUdr'
            set skills1[ 4] = 'AUfn'
            set skills1[ 5] = 'AUfu'
            set skills1[ 6] = 'AUdd'
            set skills1[ 7] = 'AUdr'
            set skills1[ 8] = 'AUfn'
            set skills1[ 9] = 'AUfu'
            set skills1[10] = 'AUdr'
        elseif (heroid == 'Udre') then
            set skills1[ 1] = 'AUav'
            set skills1[ 2] = 'AUsl'
            set skills1[ 3] = 'AUcs'
            set skills1[ 4] = 'AUav'
            set skills1[ 5] = 'AUsl'
            set skills1[ 6] = 'AUin'
            set skills1[ 7] = 'AUcs'
            set skills1[ 8] = 'AUav'
            set skills1[ 9] = 'AUsl'
            set skills1[10] = 'AUcs'
        endif
    elseif (order == 2) then
        set hero_id2 = heroid
        if (heroid == 'Udea') then
            set skills2[ 1] = 'AUdc'
            set skills2[ 2] = 'AUau'
            set skills2[ 3] = 'AUdc'
            set skills2[ 4] = 'AUau'
            set skills2[ 5] = 'AUdc'
            set skills2[ 6] = 'AUan'
            set skills2[ 7] = 'AUau'
            set skills2[ 8] = 'AUdp'
            set skills2[ 9] = 'AUdp'
            set skills2[10] = 'AUdp'
        elseif (heroid == 'Ulic') then
            set skills2[ 1] = 'AUfn'
            set skills2[ 2] = 'AUfu'
            set skills2[ 3] = 'AUdr'
            set skills2[ 4] = 'AUfn'
            set skills2[ 5] = 'AUfu'
            set skills2[ 6] = 'AUdd'
            set skills2[ 7] = 'AUdr'
            set skills2[ 8] = 'AUfn'
            set skills2[ 9] = 'AUfu'
            set skills2[10] = 'AUdr'
        elseif (heroid == 'Udre') then
            set skills2[ 1] = 'AUav'
            set skills2[ 2] = 'AUsl'
            set skills2[ 3] = 'AUcs'
            set skills2[ 4] = 'AUav'
            set skills2[ 5] = 'AUsl'
            set skills2[ 6] = 'AUin'
            set skills2[ 7] = 'AUcs'
            set skills2[ 8] = 'AUav'
            set skills2[ 9] = 'AUsl'
            set skills2[10] = 'AUcs'
        endif
    elseif (order == 3) then
        set hero_id3 = heroid
        if (heroid == 'Udea') then
            set skills3[ 1] = 'AUdc'
            set skills3[ 2] = 'AUau'
            set skills3[ 3] = 'AUdc'
            set skills3[ 4] = 'AUau'
            set skills3[ 5] = 'AUdc'
            set skills3[ 6] = 'AUan'
            set skills3[ 7] = 'AUau'
            set skills3[ 8] = 'AUdp'
            set skills3[ 9] = 'AUdp'
            set skills3[10] = 'AUdp'
        elseif (heroid == 'Ulic') then
            set skills3[ 1] = 'AUfn'
            set skills3[ 2] = 'AUfu'
            set skills3[ 3] = 'AUdr'
            set skills3[ 4] = 'AUfn'
            set skills3[ 5] = 'AUfu'
            set skills3[ 6] = 'AUdd'
            set skills3[ 7] = 'AUdr'
            set skills3[ 8] = 'AUfn'
            set skills3[ 9] = 'AUfu'
            set skills3[10] = 'AUdr'
        elseif (heroid == 'Udre') then
            set skills3[ 1] = 'AUav'
            set skills3[ 2] = 'AUsl'
            set skills3[ 3] = 'AUcs'
            set skills3[ 4] = 'AUav'
            set skills3[ 5] = 'AUsl'
            set skills3[ 6] = 'AUin'
            set skills3[ 7] = 'AUcs'
            set skills3[ 8] = 'AUav'
            set skills3[ 9] = 'AUsl'
            set skills3[10] = 'AUcs'
        endif
    endif
endfunction

//===========================================================================
// Selects hero IDs for three possible heroes
//===========================================================================
function SelectHeroes takes nothing returns nothing
    local integer roll = GetRandomInt(1,100)
    call SetHero( 1, 'Udea' )
    call SetHero( 2, 'Ulic' )
    call SetHero( 3, 'Udre' )
endfunction

//===========================================================================
// Returns the hero skill for the given hero and level
//===========================================================================
function ChooseHeroSkill takes nothing returns integer
    local integer curHero = GetHeroId()
    local integer level = GetHeroLevelAI()

    if (level > max_hero_level) then
        set max_hero_level = level
    endif

    if (curHero == hero_id) then
        return skills1[level]
    elseif (curHero == hero_id2) then
        return skills2[level]
    elseif (curHero == hero_id3) then
        return skills3[level]
    endif
    return 0
endfunction

//***************************************************************************
//*
//*  Building and Harvesting
//*
//***************************************************************************

//===========================================================================
// Specifies building priorities for workers
//===========================================================================
function BuildPriorities takes nothing returns nothing
    local integer mine = TownWithMine()
    call SetBuildAll( BUILD_UNIT, 1, 'unpl', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'uaco', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'uaco', -1 )
    call SetBuildAll( BUILD_UNIT, 3, 'uaco', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'uzig', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'uaod', -1 )
    call SetBuildAll( BUILD_UNIT, 4, 'uaco', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'usep', -1 )
    call SetBuildAll( BUILD_UNIT, 5, 'uaco', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'ugrv', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'uzig', -1 )
    call SetBuildAll( BUILD_UNIT, 1, hero_id, -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'ugho', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'ugho', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'usep', -1 )
    call SetBuildAll( BUILD_UNIT, 3, 'ugho', -1 )
    call SetBuildAll( BUILD_UNIT, 4, 'ugho', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'uzg1', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'uzg1', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'utom', -1 )                         
    call SetBuildAll( BUILD_UNIT, 1, 'ucry', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'ucry', -1 )
    call SetBuildAll( BUILD_UNIT, 3, 'ucry', -1 )
    call SetBuildAll( BUILD_UNIT, 4, 'ucry', -1 )
    call SetBuildAll( BUILD_UNIT, 3, 'uzig', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'unp1', -1 )
    call SetBuildAll( BUILD_UNIT, 1, hero_id2, -1 )
    call SetBuildAll( BUILD_UPGRADE, 1, 'Rura', -1 )
    call SetBuildAll( BUILD_UPGRADE, 1, 'Rucr', -1 )
    call SetBuildAll( BUILD_UNIT, 4, 'uzig', -1 )
    call SetBuildAll( BUILD_UPGRADE, 2, 'Rura', -1 )
    call SetBuildAll( BUILD_UPGRADE, 2, 'Rucr', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'usap', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'uslh', -1 )   
    call SetBuildAll( BUILD_UNIT, 5, 'uzig', -1 )
    call SetBuildAll( BUILD_UNIT, 6, 'uzig', -1 )
    if (( GetPlayerUnitTypeCount(Player(0), 'hmtt') > 1 ) or ( GetPlayerUnitTypeCount(Player(0), 'hmtt') > 1 )) then
        call SetBuildAll( BUILD_UNIT, 1, 'umtw', -1 )
        call SetBuildAll( BUILD_UNIT, 2, 'umtw', -1 )
        call SetBuildAll( BUILD_UNIT, 3, 'umtw', -1 )
    endif
    if (( GetPlayerUnitTypeCount(Player(0), 'etrp') > 2 ) or ( GetPlayerUnitTypeCount(Player(0), 'owtw') > 4 )) then
        call SetBuildAll( BUILD_UNIT, 1, 'umtw', -1 )
        call SetBuildAll( BUILD_UNIT, 2, 'umtw', -1 )
    endif
    if(GetUnitCount('ufro') >= 1) then 
        call BuildExpansion('unpl', 'ugol')
    endif
    if(GetUnitCount('ugol') > 1) then
        call SetBuildAll( BUILD_UNIT, 6, 'uaco', -1 )
        call SetBuildAll( BUILD_UNIT, 7, 'uaco', -1 )
        call SetBuildAll( BUILD_UNIT, 8, 'uaco', -1 )
        call SetBuildAll( BUILD_UNIT, 9, 'uaco', -1 )
        call SetBuildAll( BUILD_UNIT, 10, 'uaco', -1 )
    endif 
    call SetBuildAll( BUILD_UNIT, 1, 'ugar', -1 )
    call SetBuildAll( BUILD_UNIT, 2, 'ugar', -1 )
    call SetBuildAll( BUILD_UNIT, 3, 'ugar', -1 )
    call SetBuildAll( BUILD_UNIT, 4, 'ugar', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'uobs', -1 )
    call SetBuildAll( BUILD_UNIT, 5, 'ugar', -1 )
    call SetBuildAll( BUILD_UNIT, 6, 'ugar', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'unp2', -1 )
    call SetBuildAll( BUILD_UNIT, 7, 'uzig', -1 )
    call SetBuildAll( BUILD_UNIT, 8, 'uzig', -1 )
    call SetBuildAll( BUILD_UNIT, 9, 'uzig', -1 )
    call SetBuildAll( BUILD_UNIT, 1, 'ubon', -1 )
    if(GetUnitCount('ugol') >= 2 and TownThreatened() == false) then
        call SetBuildAll( BUILD_UNIT, 1, 'unpl', 1 ) 
        call SetBuildAll( BUILD_UNIT, 1, 'uzig', 1 )
        call SetBuildAll( BUILD_UNIT, 2, 'uzig', 1 )
        call SetBuildAll( BUILD_UNIT, 1, 'uzg1', 1 )
        call SetBuildAll( BUILD_UNIT, 2, 'uzg1', 1 )
    endif
    if(GetUnitCount('ufro') >= 1) then
        call SetBuildAll( BUILD_UNIT, 1, 'utod', 1 )
        call SetBuildAll( BUILD_UNIT, 2, 'utod', 1 )
    endif
    call SetBuildAll( BUILD_UPGRADE, 1, 'Ruwb', -1 )
    call SetBuildAll( BUILD_UPGRADE, 1, 'Rubu', -1 )
    call SetBuildAll( BUILD_UPGRADE, 1, 'Rusf', -1 )
    call SetBuildAll( BUILD_UPGRADE, 3, 'Rura', -1 )
    call SetBuildAll( BUILD_UPGRADE, 3, 'Rucr', -1 )
    if(GetUnitCount('ufro') >= 1) then
        call SetBuildAll( BUILD_UPGRADE, 1, 'Rune', 1 )
        call SetBuildAll( BUILD_UPGRADE, 1, 'Ruba', 1 )
        call SetBuildAll( BUILD_UPGRADE, 2, 'Rune', 1 )
        call SetBuildAll( BUILD_UPGRADE, 2, 'Ruba', 1 )
        call SetBuildAll( BUILD_UPGRADE, 1, 'Rusl', 1 )
        call SetBuildAll( BUILD_UPGRADE, 1, 'Rusm', 1 )
        call SetBuildAll( BUILD_UPGRADE, 3, 'Rucr', 1 )
    endif    
    call SetBuildAll( BUILD_UNIT, 2, 'ugrv', -1 )
    call SetBuildAll( BUILD_UNIT, 1, hero_id3, -1 )
    if (( GetPlayerUnitTypeCount(Player(0), 'ufro') < 3 ) or ( GetPlayerUnitTypeCount(Player(0), 'edry') > 6 ) or ( GetPlayerUnitTypeCount(Player(0), 'echm') < 2 ) or (( GetPlayerUnitTypeCount(Player(0), 'otau') < 3 ) and ( GetPlayerUnitTypeCount(Player(0), 'owyv') < 5 )) or (( GetPlayerUnitTypeCount(Player(0), 'hgry') < 3 ) and ( GetPlayerUnitTypeCount(Player(0), 'hdhw') < 3 ))) then
        call SetBuildAll( BUILD_UNIT, 1, 'uabo', -1 )
    endif
    if (( GetPlayerUnitTypeCount(Player(0), 'ufro') > 3 ) or ( GetPlayerUnitTypeCount(Player(0), 'ugar') > 6 ) or ( GetPlayerUnitTypeCount(Player(0), 'owyv') >= 3 ) or ( GetPlayerUnitTypeCount(Player(0), 'otbr') < 2 ) or ( GetPlayerUnitTypeCount(Player(0), 'hgry') >= 3 ) or ( GetPlayerUnitTypeCount(Player(0), 'hdhw') >= 3 ) or ( GetPlayerUnitTypeCount(Player(0), 'echm') >= 3 ) and ( GetPlayerUnitTypeCount(Player(0), 'ehip') >= 3 )) then
        call SetBuildAll( BUILD_UNIT, 7, 'ugar', -1 )
        call SetBuildAll( BUILD_UNIT, 8, 'ugar', -1 )
        call SetBuildAll( BUILD_UNIT, 9, 'ugar', -1 )
        call SetBuildAll( BUILD_UNIT, 10, 'ugar', -1 )
        call SetBuildAll( BUILD_UNIT, 11, 'ugar', -1 )
        call SetBuildAll( BUILD_UNIT, 12, 'ugar', -1 )
        call SetBuildAll( BUILD_UNIT, 13, 'ugar', -1 )
        call SetBuildAll( BUILD_UNIT, 14, 'ugar', -1 )
        call SetBuildAll( BUILD_UNIT, 15, 'ugar', -1 )
        call SetBuildAll( BUILD_UNIT, 16, 'ugar', -1 )
    endif
    call SetBuildAll( BUILD_UNIT, 2, 'ubon', -1 )
    if (( GetPlayerUnitTypeCount(Player(0), 'ugar') < 6 ) or ( GetPlayerUnitTypeCount(Player(0), 'edry') <= 5 ) and ( GetPlayerUnitTypeCount(Player(0), 'ehip') <= 5 ) or ( GetPlayerUnitTypeCount(Player(0), 'hgry') <= 3 ) and ( GetPlayerUnitTypeCount(Player(0), 'hdhw') <= 3 ) or ( GetPlayerUnitTypeCount(Player(0), 'owyv') <= 3 ) and ( GetPlayerUnitTypeCount(Player(0), 'otbr') <= 3 )) then
        call SetBuildAll( BUILD_UNIT, 2, 'ufro', -1 )
        call SetBuildAll( BUILD_UNIT, 3, 'ufro', -1 )
        call SetBuildAll( BUILD_UNIT, 1, 'ufro', -1 )
        call SetBuildAll( BUILD_UNIT, 4, 'ufro', -1 )
    endif
    if(GetUnitCount('ufro') >= 1) then
        call SetBuildAll( BUILD_UNIT, 1, 'uban', 1 )
        call SetBuildAll( BUILD_UNIT, 1, 'unec', 1 )
        call SetBuildAll( BUILD_UNIT, 2, 'uban', 1 )
        call SetBuildAll( BUILD_UNIT, 2, 'unec', 1 )
    endif
    call SetBuildAll( BUILD_UPGRADE, 1, 'Rume', -1 )
    call SetBuildAll( BUILD_UPGRADE, 1, 'Ruar', -1 )
    call SetBuildAll( BUILD_UPGRADE, 2, 'Rume', -1 )
    call SetBuildAll( BUILD_UPGRADE, 1, 'Rupc', -1 )
    call SetBuildAll( BUILD_UPGRADE, 3, 'Rume', -1 )
    call SetBuildAll( BUILD_UPGRADE, 2, 'Ruar', -1 )
    call SetBuildAll( BUILD_UPGRADE, 3, 'Ruar', -1 )
    call SetBuildAll( BUILD_UPGRADE, 1, 'Rufb', -1 )
    call SetBuildAll( BUILD_UNIT, 3, 'uzg1', -1 )
    call SetBuildAll( BUILD_UNIT, 4, 'uzg1', -1 )
    call SetBuildAll( BUILD_UNIT, 5, 'uzg1', -1 )
    call SetBuildAll( BUILD_UNIT, 6, 'uzg1', -1 )
endfunction

//===========================================================================
// Specifies harvesting priorities for workers
//===========================================================================
function HarvestPriorities takes nothing returns nothing
    local integer mine = TownWithMine()
    local integer allGold = GetUnitCountDone('uaco')
    local integer allWood = GetUnitCountDone('ugho')
    local integer numWorkers
    set numWorkers = 5
    call HarvestGold( 0, numWorkers )
    set numWorkers = 4
    call HarvestWood( 0, numWorkers )
    set numWorkers = 5
    call HarvestGold( 1, numWorkers )
    set numWorkers = 5
    call HarvestGold( 2, numWorkers )
    set numWorkers = 5
    call HarvestGold( 3, numWorkers )
    set numWorkers = 5
    call HarvestGold( 4, numWorkers )
endfunction

//===========================================================================
// Determines all building and harvesting assignments for workers
//===========================================================================
function WorkerAssignment takes nothing returns nothing
    loop
        // Harvesting
        call ClearHarvestAI(  )
        call HarvestPriorities(  )

        // Building
        call InitBuildArray(  )
        call BuildPriorities(  )
    endloop
endfunction

//***************************************************************************
//*
//*  Attacking
//*
//***************************************************************************

//===========================================================================
// Returns true if the minimum forces for an attack exist
//===========================================================================
function HaveMinimumAttackers takes nothing returns boolean
    if ((attackWave == 1 or attackWave == 2 or attackWave == 3) and GetUnitCountDone(hero_id) == 1 and GetUnitCountDone('ucry') >= 3) then
        return true
    endif
    if((GetUnitCountDone(hero_id) == 1 and GetUnitCountDone(hero_id2) == 1 and GetUnitCountDone(hero_id3) == 1 and GetUnitCountDone('ugar') >= 3) or (GetUnitCountDone(hero_id) == 1 and GetUnitCountDone(hero_id2) == 1 and GetUnitCountDone('ugar') >= 3 and GetUnitCountDone('ucry') >= 3) or (GetUnitCountDone(hero_id) == 1 and GetUnitCountDone('ufro') >= 3 and GetUnitCountDone('ugar') >= 2)) then
        return true
    endif
    return false
endfunction

//===========================================================================
// Assigns units to attack based on the given attack group
//===========================================================================
function PrepareAttackGroup takes integer groupID returns nothing
    local integer all
    if (groupID == 3) then
        set all = GetUnitCountDone( 'ufro' )
        call AddAttackUnit( all,   all,   'ufro' )
        set all = GetUnitCountDone( 'uobs' )
        call AddAttackUnit( all, all, 'uobs' )
        set all = GetUnitCountDone( hero_id )
        call AddAttackUnit( all, all, hero_id )
        set all = GetUnitCountDone( hero_id2 )
        call AddAttackUnit( all, all, hero_id2 )
        set all = GetUnitCountDone( hero_id3 )
        call AddAttackUnit( all, all, hero_id3 )
        set all = GetUnitCountDone( 'ucry' )
        call AddAttackUnit( all, all, 'ucry' )
        set all = GetUnitCountDone( 'ugar' )
        call AddAttackUnit( all, all, 'ugar' )
        set all = GetUnitCountDone( 'uabo' )
        call AddAttackUnit( all, all, 'uabo' )
        set all = GetUnitCountDone( 'uban' )
        call AddAttackUnit( all, all, 'uban' )
        set all = GetUnitCountDone( 'unec' )
        call AddAttackUnit( all, all, 'unec' )

        // Attack Group #3: Gargs
    elseif (groupID == 2) then
        set all = GetUnitCountDone( 'ugar' )
        call AddAttackUnit( all, all, 'ugar' )
        set all = GetUnitCountDone( hero_id )
        call AddAttackUnit( all, all, hero_id )
        set all = GetUnitCountDone( hero_id2 )
        call AddAttackUnit( all, all, hero_id2 )
        set all = GetUnitCountDone( 'ucry' )
        call AddAttackUnit( all, all, 'ucry' )
        set all = GetUnitCountDone( 'uobs' )
        call AddAttackUnit( all, all, 'uobs' )

        // Attack Group #4: Minimum
    elseif (groupID == 1) then
        set all = GetUnitCountDone( hero_id )
        call AddAttackUnit( all, all, hero_id )
        set all = GetUnitCountDone( 'ucry' )
        call AddAttackUnit( all, all, 'ucry' )

    endif
endfunction

//===========================================================================
// Prepares an attack group based on the current attack wave
//===========================================================================
function PrepareForces takes nothing returns nothing
    if (attackWave == 1) then
        call PrepareAttackGroup( 1 )
    elseif (attackWave == 2) then
        call PrepareAttackGroup( 2 )
    elseif (attackWave == 3) then
        call PrepareAttackGroup( 3 )
    elseif (attackWave == 4) then
        call PrepareAttackGroup( 3 )
    endif
endfunction

//===========================================================================
// Sleep delays for each attack wave
//===========================================================================
function AttackWaveDelay takes integer inWave returns nothing
    if (inWave < nextDelay) then
        return
    endif
    set nextDelay = inWave + 1
endfunction

//===========================================================================
// Advances attack wave counter
//===========================================================================
function AttackWaveUpdate takes nothing returns nothing
    set attackWave = attackWave + 1
    if (attackWave > 4) then
        set attackWave = 4
        set nextDelay = attackWave + 1
    endif
endfunction

//===========================================================================
// Basic attack functionality
//===========================================================================
function AttackTarget takes unit target, boolean addAlliance returns nothing
    if (target == null) then
        return
    endif
    if (addAlliance) then
        call SetAllianceTarget( target )
    endif
    call FormGroup( 3, true )
    call AttackMoveKillA( target )
    if (not addAlliance) then
        call SetAllianceTarget( null )
    endif
endfunction

//===========================================================================
// Initiates an attack based on target priorities
//===========================================================================
function LaunchAttack takes nothing returns nothing
    local unit target = null
    local boolean setAlly = true
    // Don't launch any attack while town is threatened
    if (TownThreatened()) then
        call Sleep(5)
    endif
    
    // Target Priority #4
    if (target == null and FoodUsed() < 50) then
        set target = GetEnemyExpansion()
        call StartGetEnemyBase(  )
        set target = GetEnemyBase()
    endif

    // Target Priority #5
    if (target == null and FoodUsed() >= 50) then
        call StartGetEnemyBase(  )
        set target = GetEnemyBase()
    endif

    // Target Priority #6
    if (target == null and FoodUsed() < 50) then
        set target = GetCreepCamp( 0, 9, false )
    endif

    // Target Priority #7
    if (target == null and FoodUsed() < 50) then
        set target = GetCreepCamp( 10, 100, true )
    endif

    // Attack the target and increment attack wave
    if (target != null) then
        call AttackTarget( target, setAlly )
        call AttackWaveUpdate(  )
    endif
endfunction

//===========================================================================
// Determines all attacking assignments
//===========================================================================
function AttackAssignment takes nothing returns nothing
    loop
        loop
            exitwhen (HaveMinimumAttackers() and not CaptainRetreating())
            call Sleep( 2 )
        endloop
        call RemoveInjuries(  )
        call ResetAttackUnits(  )
        call PrepareForces(  )
        call LaunchAttack(  )
    endloop
endfunction

//***************************************************************************
//*
//*  Main Entry Point
//*
//***************************************************************************

//===========================================================================
function main takes nothing returns nothing
    call InitAI(  )
    call SetPlayerName( Player(1), "120" )
    call InitOptions(  )
    call SelectHeroes(  )
    call CreateCaptains(  )
    call SetHeroLevels( function ChooseHeroSkill )
    call StartThread( function WorkerAssignment )
    call StartThread( function AttackAssignment )
    call PlayGame(  )
endfunction
                                     
